<>
  <Transition appear show={isOpen} as={Fragment}>
    <Dialog as="div" onClose={closeModal}>
      <Transition.Child
        as={Fragment}
        enter="ease-out duration-300"
        enterFrom="opacity-0"
        enterTo="opacity-100"
        leave="ease-in duration-200"
        leaveFrom="opacity-100"
        leaveTo="opacity-0"
      >
        <div className="fixed inset-0 bg-black bg-opacity-25" />
      </Transition.Child>

      <div className="fixed inset-0 overflow-y-hidden">
        <div className="flex min-h-full items-center justify-center text-center">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0 scale-95"
            enterTo="opacity-100 scale-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100 scale-100"
            leaveTo="opacity-0 scale-95"
          >
            <Dialog.Panel className=" transform rounded-sm bg-white p-6 text-left align-middle shadow-xl transition-all">
              <Dialog.Title
                as="h3"
                className="text-xl font-medium leading-6 text-black"
              >
                <div className="flex justify-between items-baseline">
                  <div>
                    <span>Detalles del pedido</span>
                    <p className="text-sm mt-1 text-gray-500">
                      Realizado el:{" "}
                      {new Date(selected?.createdAt).toLocaleDateString()} a las{" "}
                      {new Date(selected?.createdAt).toLocaleTimeString()}
                    </p>
                  </div>
                  <div>
                    {selected?.state == "pending" ? (
                      <h2 className="bg-amber-400 text-white text-sm px-2 rounded-lg">
                        Pendiente
                      </h2>
                    ) : selected?.state == "confirmed" ? (
                      <h2 className="bg-green-500 text-white text-sm px-2 rounded-lg">
                        Confirmado
                      </h2>
                    ) : selected?.state == "sent" ? (
                      <h2 className="bg-green-700 text-white text-sm px-2 rounded-lg">
                        Enviado
                      </h2>
                    ) : null}
                  </div>
                </div>
              </Dialog.Title>
              <div className="my-3 text-[.95rem] flex flex-col">
                {selected?.products.map((product, i) => {
                  return (
                    <div
                      key={i}
                      className="flex flex-col gap-1 mb-1 justify-between border-b border-gray-200"
                    >
                      <span className="font-semibold hover:text-gray-500 text-gray-800 transition-all duration-100">
                        -
                        <a
                          key={i}
                          rel="noreferrer"
                          target="_blank"
                          href={`/products/${product.id}`}
                        >
                          {product.name}
                        </a>{" "}
                        x {product.count}
                      </span>{" "}
                      <div className="flex flex-col">
                        {/* This product.option es outdated, I only keep it to correctly show older orders correctly */}
                        {product.option ? (
                          <span className="text-gray-600">
                            Opción:{" "}
                            <span className="italic">{product.option}</span>
                          </span>
                        ) : null}
                        {product.size !== "none" &&
                        typeof product.size !== "undefined" ? (
                          <span className="text-gray-600">
                            Tamaño:{" "}
                            <span className="italic">{product.size}</span>
                          </span>
                        ) : null}
                        {product.color_1 !== "none" &&
                        typeof product.color_1 !== "undefined" ? (
                          <span className="text-gray-600">
                            Color 1:{" "}
                            <span className="italic">{product.color_1}</span>
                          </span>
                        ) : null}
                        {product.color_2 !== "none" &&
                        typeof product.color_2 !== "undefined" ? (
                          <span className="text-gray-600">
                            Color 2:{" "}
                            <span className="italic">{product.color_2}</span>
                          </span>
                        ) : null}
                        {product.style !== "none" &&
                        typeof product.style !== "undefined" ? (
                          <span className="text-gray-600">
                            Estilo:{" "}
                            <span className="italic">{product.style}</span>
                          </span>
                        ) : null}
                        {product.model !== "none" &&
                        typeof product.model !== "undefined" ? (
                          <span className="text-gray-600">
                            Modelo:{" "}
                            <span className="italic">{product.model}</span>
                          </span>
                        ) : null}
                      </div>
                      <span className="self-end">
                        {formatter.format(product.price)}
                      </span>
                    </div>
                  );
                })}
                <span className="text-green-600 font-semibold self-end mt-4">
                  Total: {formatter.format(selected?.total)}
                </span>
                <div className="flex flex-col gap-2">
                  <span className="text-gray-500 font-semibold border-b border-gray-200">
                    Información de contacto
                  </span>
                  <div className="flex flex-col">
                    <span className="text-xs">Nombre del cliente</span>
                    <span className="font-semibold">{selected.clientName}</span>
                  </div>
                  <div className="flex flex-col">
                    <span className="text-xs">Email</span>
                    <span className="font-semibold">
                      {selected.clientEmail}
                    </span>
                  </div>
                </div>
              </div>

              <div className="mt-4 self-end">
                <button
                  type="button"
                  className="inline-flex justify-center border hover:border-red-800 border-red-400 border-transparent  text-red-400 bg-white px-4 py-1 text-sm font-medium hover:text-white hover:bg-red-800 transition-all duration-200 focus:outline-none"
                  onClick={closeModal}
                >
                  Cerrar
                </button>
              </div>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </div>
    </Dialog>
  </Transition>
</>